#!/bin/bash
# SPW - Secure Passwords
# Fork of chr1573r/pwm that relies on vim with the gnupg plugin to handle passwords
# Safer than the temporary file apporach used by chr1573r/pwm.
#
# In addition to a working gnupg setup with a valid recipient (yourself usually),
# this version also requires a working vim + gnupg plugin setup.

# Variables

# spw vars
SPWRC="$HOME/.spw/.spwrc"
SPW_INSTALL_PATH="/usr/local/bin/spw"
SELFPATH="$( cd "$(dirname "$0")" ; pwd -P )"
EDITOR="vim"

# gnupg.vim vars
export GPG_TTY=$(tty)

#term colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
GRAY=$(tput setaf 7)
DARKGRAY=$(tput setaf 8)
LRED=$(tput setaf 9)
LGREEN=$(tput setaf 10)
LYELLOW=$(tput setaf 11)
LBLUE=$(tput setaf 12)
LMAGENTA=$(tput setaf 13)
LCYAN=$(tput setaf 14)
WHITE=$(tput setaf 15)
DEF=$(tput sgr0)


# exec helpers
exsw(){
	eval "$@"
	#echo "1: $1, 2: $2, 3: $3"
	sleep 1
	[[ "$?" -ne 0 ]] && utpw "${CYAN}'$*'${DEF} returned non-zero exitcode"
}

exsf(){
	eval "$@"
	#echo "1: $1, 2: $2, 3: $3"
	sleep 1
	[[ "$?" -ne 0 ]] && utpf "${CYAN}'$*'${DEF} returned non-zero exitcode" && exit
}
# /exec helpers

# tty write helpers
utp(){
	echo -e "${RED}spw${DARKGRAY}# ${DEF}$1${DEF}"
}


utpn(){
	echo -en "${RED}spw${DARKGRAY}# ${DEF}$1${DEF}"
}

utpnc(){
	echo -en "${RED}spw${DARKGRAY}# ${DEF}$1${LYELLOW}"
}

utpw(){
	echo -e "${RED}spw${DARKGRAY}# ${YELLOW}WARN: ${DEF}$1${DEF}"
}

utpf(){
	echo -e "${RED}spw${DARKGRAY}# ${LRED}FATAL: ${DEF}$1${DEF}"
	exit
}

ut(){
	echo -e "${DEF}$1 ${DEF}"
}

utn(){
	echo -en "${DEF}$1 ${DEF}"
}

utg(){
	echo -e "${GREEN} OK${DEF}"
}

# /tty write helpers

# fs tests
dver(){
	[[ -d "$1" ]]
}

fver(){
	[[ -f "$1" ]]
	#echo $?
}

# /fs tests

# checksum related
sumbin(){
	[[ "$md5bin" == "md5sum" ]] &&	echo "$(md5sum "$1" | cut -c -32)" || echo "$(md5 -q "$1")"
}

sumver(){
	[[ $(sumbin "$1") == $(sumbin "$2") ]] && true || false
}
# /checksum related

# fs operations
# use srm for deletion if available, otherwise fallback to rm
sdel(){
	if hash srm 2>/dev/null; then
        srm "$1"
    else
        rm "$1"
    fi
}
# /fs operations

# spw setup
setupspw(){
	utp
	utp "### SPW SETUP ###"

	if ! hash spw 2>/dev/null && ! fver "$SPW_INSTALL_PATH"; then
		utpnc "Do you wish to copy spw to \"$SPW_INSTALL_PATH\"? (might require sudo.) [Y/n]"
		read -n 1 spwcopy
		[[ -z "$spwcopy" ]] || echo
	else
		utpnc "Do you wish reinstall spw to \"$SPW_INSTALL_PATH\"? (might require sudo.) [Y/n]"
		read -n 1 spwcopy
		[[ -z "$spwcopy" ]] || echo
	fi

	if [[ "$spwcopy" != [nN] ]]; then
		if touch "$SPW_INSTALL_PATH"; then
			cp -f "$SELFPATH/spw" "$SPW_INSTALL_PATH"
			chmod +x "$SPW_INSTALL_PATH"
			utp "Installed to \"$SPW_INSTALL_PATH\"."
		else
			if ! hash sudo; then
				utpw "Could not install. Permission denied and sudo not installed"
			else
				utp "No permission, attempting with sudo:"
				if sudo touch "$SPW_INSTALL_PATH"; then
					sudo cp -f "$SELFPATH/spw" "$SPW_INSTALL_PATH"
					sudo chmod +x "$SPW_INSTALL_PATH"
					utp "Installed to \"$SPW_INSTALL_PATH\"."
				else
					utpw "Could not install. Permission denied."
				fi
			fi
		fi
	fi


	unset complete
	while [[ -z "$complete" ]]; do
		utpnc "What recipient will be used for GPG encryption? (Must be present in GPG keychain): "
		read srecepient &&
		if [[ -z "$srecepient" ]];then
			utpw "Recipient can not be empty."
		else
			echo -n "$LBLUE"
			gpg --list-keys "$srecepient" && complete=true || utpw "Could not find identity in GPG keychain."
		fi
	done

	unset complete
	while [[ -z "$complete" ]]; do
		utpnc "Where do you want to store passwords? [Def: $HOME/.spw/pw]: "
		read spdir && [[ -z "$spdir" ]] && spdir="$HOME/.spw/pw"
		exsw "mkdir -p "$spdir""
		dver "$spdir" && complete=true || utpw "Directory not valid."
	done

	# unset complete
	# cd "$spdir"
	# while [[ -z "$complete" ]]; do
	# 	srepo=n

	# 	if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
	# 		utp "Password directory seems to reside within a git repo."
	# 		utp "spw can push/pull to master branch, so that your encryped passwords are stored in the repo"
	# 		utp "Enable this only if you know the implications/risks involved."
	# 		utpnc "Do you want to enable git sync? [y/N] "
	# 		read -n 1 srepo
	# 		[[ "$srepo" == [yY] ]] && srepo="Y" && utp "Repo sync will be ${CYAN}enabled" || srepo="N" && utp "Repo sync will be ${CYAN}disabled"
	# 		complete=true
	# 	else
	# 		utp "Could not detect git in pw dir, skipping repo step. (reposync can be enabled manually in .spwrc)"
	# 		complete=true
	# 	fi
	# done

	unset complete
	[[ "$srepo" == "Y" ]] && srepo="enabled" || srepo="disabled"
	while [[ -z "$complete" ]]; do
		utp "SPW is ready to write the following to ${CYAN}$SPWRC"
		echo -e "${YELLOW}RECEPIENT=\"$srecepient\"\nPDIR=\"$spdir\""
		utpnc "Save settings to file? [Y/n] "
		read -n 1 sconfirm
		[[ -z "$sconfirm" ]] || echo
		if [[ "$sconfirm" != [nN] ]]; then
			utpn "Writing and verifying configuration..."
			echo "### SPW configuration ###" > "$SPWRC"
			fver "$SPWRC" || utpf "Could not write to ${CYAN}$SPWRC${DEF}. Please check."
			echo -e "RECEPIENT=\"$srecepient\"\nREPOSYNC=\"$srepo\"\nPDIR=\"$spdir\"" >> "$SPWRC"
			source "$SPWRC"
			[[ "$RECEPIENT" == "$srecepient" ]] || utpf "Failed to verify config from .spwrc (RECEPIENT)"
			#[[ "$REPOSYNC" == "$srepo" ]] || utpf "Failed to verify config from .spwrc (REPOSYNC)"
			[[ "$PDIR" == "$spdir" ]] || utpf "Failed to verify config from .spwrc (PDIR)"
			utg
		fi
		complete=true
	done
}

# /spw setup

# spw init
spwinit(){

	# Binaries check
	hash md5 2>/dev/null && md5bin="md5"
	hash md5sum 2>/dev/null && md5bin="md5sum"
	[[ -z "$md5bin" ]] && utpf "md5/md5sum binary not found, please install."
	hash gpg 2>/dev/null || utpf "GPG binary not found, please install."

	# cfg check
	if ! fver "$SPWRC"; then
		utpw "Can't find ${CYAN}'$SPWRC'${DEF}."
		utpnc "Do you want to initiate the ${CYAN}setup wizard${DEF}? [Y/n] "
		read -n 1 setup
		[[ -z "$setup" ]] || echo
		[[ "$setup" != [nN] ]] && setupspw
	fi
	fver "$SPWRC" || utpf "Can't load ${CYAN}'$SPWRC'${DEF}, please create." && source "$SPWRC"

	#pw storage check
	dver "$PDIR" || utpf "Password dir ${CYAN}'$PDIR'${DEF} not found"
}
# /spw init


# spw main
spwmain(){
	case "$1" in
		new)
			[[ -z "$2" ]] && utpf "Please provide a filename"
			fver "$PDIR/$2.asc" && utpf "Entry ${YELLOW}'$2'${DEF} already exists. Please edit or delete."
			echo -ne "\033]0;spw - ${2}\007"
			exsf "$EDITOR "$PDIR/$2.asc""
			fver "$PDIR/$2.asc" || utpf "File not found, forgot to save?"
			utp "Entry ${YELLOW}'$2'${DEF} stored!"
			;;
		open|edit)
			fver "${PDIR}/$2.asc" || utpf "No entry for ${CYAN}'$2'${DEF} found."
			if fver "${PDIR}/$2.bak"; then
				if ! sumver "${PDIR}/$2.asc" "${PDIR}/$2.bak"; then
					utpn "An old backup of ${YELLOW}'$2'${DEF} was found ($PDIR/$2.bak). Overwrite? [y/N]"
					read -n 1 spwoverwritebackup
					[[ -z "$spwoverwritebackup" ]] || echo
					[[ "$spwoverwritebackup" != [yY] ]] && utp "Aborting" && exit
				fi
			fi
			cp "${PDIR}/$2.asc" "${PDIR}/$2.bak"
			fver "${PDIR}/$2.bak" || utpf "Failed to create backup of ${YELLOW}'$2'${DEF}, aborting"
			sumver "${PDIR}/$2.asc" "${PDIR}/$2.bak" || { utp "Verification failed for backup of ${YELLOW}'$2'${DEF}, aborting." && exit; }
			utp "Opening ${YELLOW}'$2'${DEF} ${CYAN}$(sumbin "$PDIR/$2.asc")"
			echo -ne "\033]0;spw - ${2}\007"
			exsf "$EDITOR "$PDIR/$2.asc""

			if sumver "$PDIR/$2.asc" "$PDIR/$2.bak"; then
				utp "Closing ${YELLOW}'$2'${DEF} ${CYAN}$(sumbin "$PDIR/$2.asc")"
				utp "No change detected for ${YELLOW}'$2'${DEF}."
			else
				utp "Closing ${YELLOW}'$2'${DEF} ${GREEN}$(sumbin "$PDIR/$2.asc")"
				utpn "Keep changes? [Y/n] "
				read -n 1 spwkeepchanges
				[[ -z "$spwkeepchanges" ]] || echo
				if [[ "$spwkeepchanges" == [nN] ]]; then
					cp "$PDIR/$2.bak" "$PDIR/$2.asc"
					sumver "$PDIR/$2.asc" "$PDIR/$2.bak" || { utp "Failed to rollback ${YELLOW}'$2'${DEF}, aborting." && exit; }
					utp "Keeping ${YELLOW}'$2'${DEF} ${CYAN}$(sumbin "$PDIR/$2.asc")"
				else
					utp "Keeping ${YELLOW}'$2'${DEF} ${GREEN}$(sumbin "$PDIR/$2.asc")"
				fi



				fver "$PDIR/$2.asc" || utpf "Could not find ${YELLOW}'$2.asc'${DEF}. Please investigate. Plaintext ${RED}NOT deleted."
			fi
			sdel "$PDIR/$2.bak"
			fver "$PDIR/$2.bak" && utpw "Could not delete temporary backup for ${YELLOW}'$2.bak'${DEF}: $PDIR/$2.bak "
			;;

		delete)
			fver "${PDIR}/$2.asc" || utpf "No entry for ${YELLOW}'$2'${DEF} exists."
			utp "File ${YELLOW}'${PDIR}/$2.asc'${DEF} will be DELETED"
			utpn "This action can not be reversed. Proceed? [y/N] "
			read -n 1 spwdelete
			[[ -z "$spwdelete" ]] || echo
			[[ "$spwdelete" != [yY] ]] && utp "Aborting" && exit
			utpnc "Please type '${YELLOW}$2${DEF}' without quotes, and press enter to confirm deletion (Press ctrl-c to abort): "
			read spwdeleteconfirm
			[[ "$spwdeleteconfirm" != "$2" ]] && utp "Aborting, no changes were made." && exit
			exsf "sdel "${PDIR}/$2.asc""
			fver "${PDIR}/$2.asc" && utpf "Could not delete file ${YELLOW}'${PDIR}/$2.asc'${DEF}."
			fver "${PDIR}/$2.asc" || utp "${YELLOW}'${PDIR}/$2.asc'${DEF} deleted."
			;;


		config)
			utp "Current configuration ($SPWRC):"
			cat "$SPWRC"
			;;

		setup)
			setupspw
			;;

		list|*)
			utp "Following entries are available:"
			for pw in "$PDIR"/*.asc; do
				utp "$DARKGRAY> $YELLOW$(basename "$pw" | awk '{print substr($0, 0, length($0)-4)}' -)"
				((listc++))
				[[ "$listc" -gt "$(tput lines)" ]] && tput sc && utn ":" && read -n 1 > /dev/null && tput rc && tput el
			done
			;;
	esac
}

# /spw main

# run
spwinit
spwmain "${@}"
